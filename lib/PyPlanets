#! /usr/bin/python2.6
#  -*- coding: utf-8 -*-
# Requires pygame
"""
PyPlanets - N-body simulation codded in python.
Copyright (C) 2010  Mateus Zitelli

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
"""

import pygame , sys , time , random , pyplanets_calculations
import Py3De as py3d
from pygame.locals import *
from math import *
from decimal import *

class Corpo(py3d.Circle):
	def __init__(self,cordx,cordy,cordz,velxA,velyA,velzA,massa,raio = False): #(x,y,speedX,speedY,mass)
		self.x = cordx
		self.y = cordy
		self.z = cordz
		self.mass = massa 
		self.velx = float(velxA) #Cuidado: dependendo do valor pode estourar o Float
		self.vely = float(velyA)
		self.velz = float(velzA)
		if not raio:
			self.size = (self.mass/pi*5)**(1/2.0)
		else:
			self.size = raio
		self.color = (int(255-random.random()*200),int(255-random.random()*200),int(255-random.random()*200))

class Simulacao:
	def __init__(self,tamanho,relativity = False):
		self.tamanho = tamanho
		self.camera = py3d.Camera(0,0,-100,0,0,2)
		self.scene = py3d.Scene(tamanho[0],tamanho[1],self.camera)
		self.corpos = []
		self.zoom = 1.0
		self.vezes = 0
		self.pintar = False
		self.pausado = True
		self.valores = {}
		self.relativity = relativity
		self.lines = False


	def interacao(self,corpo_a,corpo_b):
		if corpo_a.mass == 0:
			corpo_a.mass = 0.1E-30
		if not (corpo_a,corpo_b) in self.valores and not (corpo_b,corpo_a) in self.valores:
			forc = pyplanets_calculations.forc(corpo_a.x,corpo_a.y,corpo_a.z,corpo_a.size,corpo_a.mass,corpo_b.x,corpo_b.y,corpo_a.z,corpo_b.size,corpo_b.mass)
			#print forc
			#const_gravitacional = 6.67428E-11
			xdif,ydif,zdif = (corpo_a.x-corpo_b.x) , (corpo_a.y-corpo_b.y) , (corpo_a.z-corpo_b.z)
			dist = pyplanets_calculations.dist(corpo_a.x,corpo_a.y,corpo_a.z,corpo_a.size,corpo_b.x,corpo_b.y,corpo_b.z,corpo_b.size) #Simplified to the next formula
			#forc = (const_gravitacional*(corpo_a.mass*10**10)*(corpo_b.mass*10**10))/(dist*10**6)**2 #F = (Constant*massA*massB)/dist**2

		else:
			if (corpo_b,corpo_a) in self.valores:
				val = self.valores[(corpo_b,corpo_a)]
				forc = val[0]
				xdif,ydif,zdif = -val[1][0],-val[1][1],-val[1][2]
				dist = val[2]
		#if self.relativity:
			#mass = pyplanets_calculations.relativistic_mass(abs(corpo_a.velx),abs(corpo_a.vely),corpo_a.mass)
		#else:
			#mass = corpo_a.mass
		mass = corpo_a.mass
		#print corpo_a.mass/rel_mass
		if dist <= corpo_a.size+corpo_b.size+10:
			aceleration = (forc/mass)
		else:
			aceleration = (forc/mass)

		Xcomp = xdif/dist
		Ycomp = ydif/dist
		Zcomp = zdif/dist
		corpo_a.velx -= aceleration * Xcomp
		corpo_a.vely -= aceleration * Ycomp
		corpo_a.velz -= aceleration * Zcomp
		self.valores[(corpo_a,corpo_b)] = (forc,(xdif,ydif,zdif),dist)

	##############################
	#Move os objetos a cada ciclo#
	##############################
	def rotacao(self,loc):
		anglox = 360*((loc[0]-self.tamanho[0]/2.0)/self.tamanho[0])
		angloy = 360*((loc[1]-self.tamanho[1]/2.0)/self.tamanho[1])
		self.camera.rx = anglox
		self.camera.ry = angloy

	def move(self):
		self.valores = {}
		for cA in self.corpos:
			for cB in self.corpos:
				if cA != cB:
					self.interacao(cA,cB)

		for obj in self.corpos:
			obj.x += obj.velx
			obj.y += obj.vely
			obj.z += obj.velz

	def draw(self):
		self.scene.render_order()
		self.scene.render(self.lines,1)

	def orbitas(self,n): #cria corpos distribuidos uniformemente em um quadrado
		for i in range(n):
			tam = round(min((self.tamanho[0],self.tamanho[1]))/sqrt(n))
			y,x = divmod(i,int(round(sqrt(n))))
			self.corpos.append(Corpo(x*tam,y*tam,0,0,10))

	def criar(self,n,massa): #Cria corpos de forma randomica pela tela
		for i in range(n):
			self.corpos.append(Corpo(random.random()*self.tamanho[0]/10-self.tamanho[0]/20,random.random()*self.tamanho[1]/10-self.tamanho[1]/20,random.random()*self.tamanho[0]/10-self.tamanho[0]/20,0,0,0,massa))
			for C in self.corpos[:len(self.corpos)-1]:
				self.scene.faces.append( py3d.Face( (C,self.corpos[-1]), (255,255,255) ) )

	def demo(self):
		for i in range(3):
			for j in range(3):
				for k in range(3):
					self.corpos.append(Corpo(i*10,j*10,k*10,0,0,0,10))
					for C in self.corpos[:len(self.corpos)-1]:
						self.scene.faces.append( py3d.Face( (C,self.corpos[-1]), (255,255,255) ) )

	def GetInput(self): #Verificacao de eventos
		key_pressed = pygame.key.get_pressed()
		mouse = pygame.mouse.get_pressed()
		for event in pygame.event.get():
			if event.type == QUIT or key_pressed[K_ESCAPE]:
				pygame.quit() #Fim do Script
				sys.exit()

			if event.type == MOUSEMOTION:
				if event.buttons[2]:
					loc = self.tamanho[0]/2 - event.pos[0]
					self.camera.z = loc
					
				if event.buttons[0]:
					self.rotacao(event.pos)



			if key_pressed[K_DOWN]: #Move a camera para BAIXO quando apertado a SETA PARA BAIXO.
				self.camera.z -= 1000

			elif key_pressed[K_UP]: #Move a camera para CIMA quando apertado a SETA PARA CIMA.
				self.camera.z += 1000

			elif key_pressed[K_LEFT]: #Move a camera para ESQUERDA quando apertado a SETA PARA ESQUERDA.
				self.camera.x += 1

			elif key_pressed[K_RIGHT]: #Move a camera para DIREITA quando apertado a SETA PARA DIREITA.
				self.camera.x -= 1

			elif key_pressed[K_c]: #Deleta todos objetos da tela
				self.corpos = []
				self.scene.clean()

			elif key_pressed[K_p]: #tecla P => Pausa/Roda o jogo
				self.pausado = not self.pausado

			elif key_pressed[K_t]: #Tecla T => Corpos randomicos pela tela
				self.criar(input("How many Bodies?"),input("\nMass:"))

			elif key_pressed[K_d]: #Tecla D => Demo:
				self.demo()
				time.sleep(0.05)

			elif key_pressed[K_v]:
				self.lines = not self.lines



	def Collision_with_edge(self): #Detecta colisao com as bordas, movendo os corpos pro outro lado#
		for P in self.corpos:
			if P.x > self.tamanho[0]:   P.x = 0;
			if P.x < 0:     P.x = self.tamanho[0];
			if P.y > self.tamanho[1]:   P.y = 0;
			if P.y < 0:     P.y = self.tamanho[1];

	def elastic(self):
		for C in self.corpos:
			for C2 in self.corpos:
				if C != C2:
					distancia = sqrt((C.x-C2.x)**2 + (C.y-C2.y)**2+(C.z-C2.z)**2)
					if distancia != 0 and distancia <= (C.size + C2.size):
						C.x, C.y, C2.x, C2.y, C.velx, C.vely, C2.velx, C2.vely = pyplanets_calculations.collision(C.x, C.y, C.velx, C.vely, C.mass, C.size, C2.x, C2.y, C2.velx, C2.vely, C2.mass, C2.size)

	def open_obj(self,arquivo,cena):
		arq = open(arquivo,"r")
		for line in arq.readlines():
			line = line.split()
			if "v" in line:
				if line[0] == "v":
					self.corpos.append(Corpo(float(line[1]),float(line[2]),float(line[3])*-1,0,0,0,0.01))
			if "f" in line:
				if line[0] == "f":
					pontos = []
					for i in line[1:]:
						i = i.split("/")[0]
						pontos.append(self.corpos[int(i)-1])
					ra = random.random()
					self.scene.faces.append( py3d.Face( pontos, (255*ra,255*ra,255*ra) ) )
		if len(self.scene.faces):
			self.scene.m_point()
			self.scene.cores()
		self.scene.render_order()


	def main_loop(self): #Roda a simulacao
		pygame.init()
		#self.open_obj("./Objs/sample.obj",self)
		while True:
			self.scene.objects = self.corpos	
			if not self.pausado:
				self.move()
				#self.Collision_with_edge()
				#self.elastic()
				self.GetInput()
				self.draw()
			else:
				self.GetInput()
				self.draw()

if __name__ == "__main__":
	if not len(sys.argv[1:]):
		print "The correct syntax is \'python pygravity X_size Y_size\'"
		print "But the simulation will run in the default mode (800x600)."
		jogo = Simulacao((800,600))
	elif len(sys.argv[1:]) == 2:
		jogo = Simulacao((int(sys.argv[1]),int(sys.argv[2])))
	else:
		print "The correct sintax is \'python pygravity X_size Y_size\'"
		sys.exit()
	jogo.main_loop()
